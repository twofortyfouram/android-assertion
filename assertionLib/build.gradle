boolean is_jack = Boolean.parseBoolean(IS_JACK_ENABLED)

apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'maven'

dependencies {
    compile group:'net.jcip', name:'jcip-annotations', version:"${JCIP_ANNOTATION_VERSION_MATCHER}"
    compile group:'com.android.support', name:'support-annotations', version:"${ANDROID_SUPPORT_ANNOTATION_VERSION_MATCHER}"
    compile group:'com.twofortyfouram', name:'android-annotation', version:"${TWOFORTYFOURAM_ANNOTATION_VERSION_MATCHER}"
    androidTestCompile group:'com.android.support.test.espresso', name:'espresso-core', version:"${ESPRESSO_CORE_VERSION_MATCHER}"
}

android {
    compileSdkVersion Integer.parseInt(ANDROID_COMPILE_SDK_VERSION)
    buildToolsVersion ANDROID_BUILD_TOOLS_VERSION

    resourcePrefix 'com_twofortyfouram_assertion_'

    defaultConfig {
        jackOptions.enabled is_jack
        minSdkVersion Integer.parseInt(ANDROID_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(ANDROID_TARGET_SDK_VERSION)
        versionCode Integer.parseInt(ANDROID_VERSION_CODE)
        versionName ANDROID_VERSION_NAME
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'proguard-consumer.txt'
    }

    buildTypes {
        debug {
            testCoverageEnabled Boolean.parseBoolean(IS_COVERAGE_ENABLED)
        }
    }
}

android.libraryVariants.all { variant ->
    task("${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        def androidHome = System.getenv('ANDROID_HOME')
        source = variant.javaCompile.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += variant.javaCompile.classpath
        classpath += variant.javaCompile.outputs.files
        options.linksOffline('https://developer.android.com/reference/', "${androidHome}/docs/reference")
        options.links('http://jcip.net.s3-website-us-east-1.amazonaws.com/annotations/doc/', 'https://twofortyfouram.github.io/android-annotation/')
        exclude '**/R.java'
    }
}

group = MAVEN_GROUP
archivesBaseName = MAVEN_ARTIFACT_NAME
version = ANDROID_VERSION_NAME

uploadArchives {
    repositories {
        mavenDeployer {
            repository(id: MAVEN_ID, url: MAVEN_URL) {
                authentication(userName: MAVEN_USERNAME, password: MAVEN_PASSWORD)
            }
            pom.project {
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}

// Workaround for naming conflict between maven and android plugins
// http://stackoverflow.com/questions/18559932/gradle-maven-plugin-install-task-does-not-work-with-android-library-project
task installArchives(type: Upload) {
    description "Installs artifacts to mavenLocal."
    repositories.mavenInstaller {
        configuration = configurations.default
    }
}

// Generates the JavaDoc as a JAR for uploading an artifact
android.libraryVariants.all { variant ->
    task("${variant.name}JavadocJar", type: Jar, dependsOn: "${variant.name}Javadoc") {
        classifier = 'javadoc'
        from tasks["${variant.name}Javadoc"].destinationDir
    }
 
    project.artifacts.add('archives', tasks["${variant.name}JavadocJar"]);
}

// Generates the source as a JAR for uploading an artifact
android.libraryVariants.all { variant ->
    task("${variant.name}SourceJar", type: Jar) {
        classifier = 'sources'
        from variant.javaCompile.source
    }
 
    project.artifacts.add('archives', tasks["${variant.name}SourceJar"]);
}

task findbugs(type: FindBugs, dependsOn: ':assertionLib:compileReleaseSources') {
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/release/')
    source = fileTree('src/main/java/')
    classpath = files()
    excludeFilter = file("$rootProject.projectDir/tools/findbugs/android-filter.xml")
    effort = 'max'
    reportLevel = 'low'
    reports {
        // Only one report type can be enabled at a time, apparently.
        xml.enabled = false
        html.enabled = true
        html.destination = "$project.buildDir/outputs/reports/findbugs/findbugs.html"
    }
}