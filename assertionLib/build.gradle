apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'maven'

dependencies {
    compile group:'net.jcip', name:'jcip-annotations', version:'1.0'
    compile group:'com.android.support', name:'support-annotations', version:'+'
    compile group:'com.twofortyfouram', name:'android-annotation', version:'[1.0.2,3.0['
    androidTestCompile group:'com.twofortyfouram', name:'android-test', version:'[1.0.4,2.0['
}

android {
    compileSdkVersion Integer.parseInt(ANDROID_COMPILE_SDK_VERSION)
    buildToolsVersion ANDROID_BUILD_TOOLS_VERSION

    resourcePrefix 'com_twofortyfouram_assertion_'

    defaultConfig {
        minSdkVersion Integer.parseInt(ANDROID_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(ANDROID_TARGET_SDK_VERSION)
        versionCode Integer.parseInt(ANDROID_VERSION_CODE)
        versionName ANDROID_VERSION_NAME
        consumerProguardFiles 'proguard-consumer.txt'
    }
    
    buildTypes {
        debug {
            testCoverageEnabled Boolean.parseBoolean(IS_COVERAGE_ENABLED)
        }
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        def androidHome = System.getenv('ANDROID_HOME')
        source = variant.javaCompile.source
        classpath = files(variant.javaCompile.classpath.files) + files("${androidHome}/platforms/${android.compileSdkVersion}/android.jar")
        options.linksOffline('http://developer.android.com/reference/', "${androidHome}/docs/reference")
        options.links('http://jcip.net.s3-website-us-east-1.amazonaws.com/annotations/doc/', 'http://twofortyfouram.github.io/android-annotation/')
    }
}

group = MAVEN_GROUP
archivesBaseName = MAVEN_ARTIFACT_NAME
version = ANDROID_VERSION_NAME

uploadArchives {
    repositories {
        mavenDeployer {
            repository(id: MAVEN_ID, url: MAVEN_URL) {
                authentication(userName: MAVEN_USERNAME, password: MAVEN_PASSWORD)
            }
            pom.project {
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}

// Workaround for naming conflict between maven and android plugins
// http://stackoverflow.com/questions/18559932/gradle-maven-plugin-install-task-does-not-work-with-android-library-project
task installArchives(type: Upload) {
    description "Installs artifacts to mavenLocal."
    repositories.mavenInstaller {
        configuration = configurations.default
    }
}

task findbugs(type: FindBugs) {
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/release/')
    source = fileTree('src/main/java/')
    classpath = files()
    excludeFilter = file("$rootProject.projectDir/tools/findbugs/android-filter.xml")
    effort = 'max'
    reportLevel = 'low'
    reports {
        // Only one report type can be enabled at a time, apparently.
        xml.enabled = false
        html.enabled = true
        html.destination = "$project.buildDir/outputs/reports/findbugs/findbugs.html"
    }
}